Given an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A.

You may return any answer array that satisfies this condition.

MY first vision:

class Solution(object):
    def sortArrayByParity(self, A):
        new = []
        for i in A:
            if i % 2 == 0:
                new.append(i)
                A.remove(i)
        new.extend(A)
        return new
'''
        
A awesome vision which beats 99% from comment:

class Solution:
    def sortArrayByParity(self, A):
        """
        :type A: List[int]
        :rtype: List[int]
        """
        start, end = 0, len(A) - 1
        while start < end:
            m, n = A[start], A[end]
            if m % 2 == 1 and n % 2 == 0:   
                A[start], A[end] = n, m     # swap odd and even
            elif m % 2 == 1:                #if end is not even
                end -= 1
            elif n % 2 == 0:                #if start is not odd
                start += 1
            else:
                start += 1
                end -= 1
        return A
                
Here is a same idea but shorter:

class Solution(object):
    def sortArrayByParity(self, A):
        """
        :type A: List[int]
        :rtype: List[int]
        """
        l, r = 0, len(A) - 1
        while l < r:            
            if A[l] & 1:                  #位运算与（一个判断奇偶性的不错的方法！）
                A[l], A[r] = A[r], A[l]
            l += not (A[l] & 1)
            r -= A[r] & 1
        return A
        
