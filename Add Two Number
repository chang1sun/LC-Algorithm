Add Two Numbers

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example:
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

Use a variable "carry" to express whether the next digit need to plus 1;

if or not the adding two number's sum > 10, let val be (sum + carry), which can be used later;

Then let carry be val/10, easy to understand that be 1 if val >= 10 while 0 if val<10

Then move the pointer forward, actually we want save storage we use as we can, so let's use
  ? : operater;
  
  Here is the code:
  
  /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* head = new ListNode(0);
        ListNode* parent = head; // build a head node;
        int carry = 0;
        while(l1||l2||carry){ //as if  only one condition exist, loop will not stop!
            int val;
            val = (l1?l1->val:0)+(l2?l2->val:0)+carry;
            l1 = l1?l1->next:nullptr;// let it be non-pointer does not harm,so why not?
            l2 = l2?l2->next:nullptr;
            carry = val/10;
            parent->next = new ListNode(val%10); // insert to tail;
            parent = parent->next;
        }
        return head->next;
    }
};
